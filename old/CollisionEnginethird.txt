using System;

namespace test {
    static class CollisionEngine {

        public static void collideStator (WorldObject mover, WorldObject stator) {
            float? shortest = null;
            float[] cf = null;
            Line shortestLine =  null;
            Line[] ml = generateLines (mover);
            Line[] sl = generateLines (stator);
            for (int i = 0; i < ml.Length; i++) {
                for (int j = 0; j < sl.Length; j++) {
                    float[] f = Line.checkCollision (ml[i], sl[j]);
                    
                    if (f != null) {
                        Console.WriteLine($"collision at {f[0]} {f[1]}");
                        float d = calcDist ((int) ml[i].x1, (int) ml[i].x2, (int) f[0], (int) f[1]);
                        Console.WriteLine("distance " + d);
                        if (d <= shortest || shortest == null) {
                            shortest = d;
                            cf = f;
                            shortestLine = ml[i];
                            Console.WriteLine($"collision x {cf[0]} y {cf[1]}");
                        }
                    }
                }
            }
            if (shortest != null) {
                Console.WriteLine("trying to place object");
                float xDiff = Math.Abs(shortestLine.x1 - mover.x);
                float yDiff = Math.Abs(shortestLine.y1 - mover.y);
                Console.WriteLine(xDiff);
                Console.WriteLine(yDiff);
                mover.x = (int)(cf[0]- xDiff);
                mover.y = (int)(cf[1]-yDiff);
                mover.dx = 0;
                mover.dy = 0;
            }

        }

        static Line[] generateLines (WorldObject wo) {
            Line[] lines;
            if (wo.dx != 0 && wo.dy != 0) {
                lines = new Line[8];
                lines[4] = new Line (wo.x, wo.y, wo.x + wo.dx, wo.y + wo.dy);
                lines[5] = new Line (wo.x + wo.width, wo.y, wo.x + wo.width + wo.dx, wo.y + wo.dy);
                lines[6] = new Line (wo.x + wo.width, wo.y + wo.height, wo.x + wo.width + wo.dx, wo.y + wo.height + wo.dy);
                lines[7] = new Line (wo.x, wo.y + wo.height, wo.x + wo.dx, wo.y + wo.height + wo.dy);
            } else {
                lines = new Line[4];
            }
            lines[0] = new Line (wo.x, wo.y, wo.x + wo.width, wo.y);
            lines[1] = new Line (wo.x + wo.width, wo.y, wo.x + wo.width, wo.y + wo.height);
            lines[2] = new Line (wo.x + wo.width, wo.y + wo.height, wo.x, wo.y + wo.height);
            lines[3] = new Line (wo.x, wo.y + wo.height, wo.x, wo.y);
            return lines;
        }

        public static float calcDist (int x1, int y1, int x2, int y2) {
            return (float) Math.Sqrt (Math.Pow (x1 - x2, 2) + Math.Pow (y1 - y2, 2));
        }

    }
}