using System;

namespace test {

    public static class Collider {

        // rectangle lines are labled 0-3 starting at top right
        // and extended by speed vector
        // assumption: object is moving
        static Line[] l;
        static float[] returnVal;
        static float? temp;

        public static void initCollider () {
            l = new Line[3];
            for (int i = 0; i < l.Legth; i++) {
                l[i] = new Line ();
            }
            returnVal = new float[2];
        }

        public static void collideWithStator (WorldObject mover, WorldObject stator) {
            // generate rects
            if (mover.dx == 0) {
                // if moving only vertically, check if the objects are in line
                if (mover.x <= stator.x + stator.width && mover.x + mover.width >= stator.x) {
                    // check if the objects are in range based on speed
                    if (mover.dy > 0 && mover.y + mover.dy + mover.height >= stator.y) {
                        // south collision
                        mover.y = stator.y - mover.height;
                        return;
                    } else if (mover.dy < 0 && mover.y + mover.dy <= stator.y + stator.height) {
                        // north collision
                        mover.y = stator.y + stator.height;
                        return;
                    }
                }
            } else if (mover.dy == 0) {
                // if moving only horizontally check if the objects are in line
                if (mover.y <= stator.y + stator.height && mover.y + mover.height >= stator.y) {
                    if (mover.dx > 0 && mover.x + mover.width + mover.dx >= stator.x) {
                        // east collision
                        mover.x = stator.x - mover.width;
                        return;
                    } else if (mover.dx < 0 && mover.x + mover.dx <= stator.x + stator.width) {
                        // west collision
                        mover.x = stator.x + stator.width;
                        return;
                    }
                }

            } else {
                l[0].fromPoints (
                            mover.x + mover.width,
                            mover.y,
                            mover.x + mover.width + mover.dx,
                            mover.y + mover.dy
                        );
                        l[1].fromPoints (
                            mover.x + mover.width,
                            mover.y + mover.height,
                            mover.x + mover.width + mover.dx,
                            mover.y + mover.height + mover.dy
                        );
                        l[2].fromPoints (
                            mover.x,
                            mover.y + mover.height,
                            mover.x + mover.dx,
                            mover.y + mover.height + mover.dy
                        );
                        l[3].fromPoints(
                            mover.x, mover.y,
                            mover.x + mover.dx,
                            mover.y + mover.dy
                        );
                if (mover.dx > 0) {
                    if (mover.dy > 0) {
                        // ++ south east
                        //stator edges
                        // CHECK FOR DISTANCE HERE

                        if (!(l[0].getOrientation (stator.x, stator.y + stator.height < 0) || l[2].getOrientation (stator.x + width, stator.y > 0))) {
                            if (l[1].getOrientation (stator.x, stator.y) >= 0) {    
                                // hits top side
                                // if the distance travelled is larger than the distance to intersect
                                if (calcDist(0, 0, mover.dx, mover.dy) >= l[1].getLength()){
                                    //place at intersection
                                    mover.x = l[1].getXfor(stator.y-mover.height);
                                    mover.y = stator.y - mover.height;
                                    mover.dx = 0;
                                    mover.dy = 0;
                                }
                            } else {
                                // hits left side
                                if (calcDist(0, 0, mover.dx, mover.dy) >= l[1].getLength()){
                                    //place at intersection
                                    mover.x = l[1].getXfor(stator.y-mover.height);
                                    mover.y = stator.y - mover.height;
                                    mover.dx = 0;
                                    mover.dy = 0;
                                }
                            }

                        }

                    } else if (mover.dy < 0) {
                        // +- north east

                    }

                } else { // dx < 0
                    if (mover.dy > 0) {
                        // -+ south west

                    } else if (mover.dy < 0) {
                        // -- north west

                    }

                }
            }

        }

        private static float? lineAgainstVert (Line l, int x, int yl, int yu) {
            if (l.xUp < x || l.xLow > x) {
                return null;
            }
            float y = l.m * x + l.b;
            if (y > yu || y < yl) {
                return null;
            }
            return y;
        }

        private static float? lineAgainstHori (Line l, int y, int xl, int xu) {
            if (l.yUp < y || l.yLow > y) {
                return null;
            }
            float x = (y - l.b) / l.m;
            if (x > xu || x < xl) {
                return null;
            }
            return x;
        }

        public static float calcDist(int x1, int y1, int x2, int y2){
            return Math.Sqrt(Math.Pow(x1-x2, 2) + Math.Pow(y1-y2, 2));
        }
    }
}